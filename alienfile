## -*- mode: perl -*-
# https://github.com/ebiggers/libdeflate/archive/v1.0.tar.gz

use strict;
use warnings;
use alienfile;
use Path::Tiny qw{path};
use Alien::Build::CommandSequence;

## default helper deps Alien::MSYS for all systems?
meta->interpolator->replace_helper(install => sub {
  return 'install';
});

plugin 'Probe::CBuilder' => (
  cflags => join(' ', grep { defined && length } $ENV{ALIEN_LIBDEFLATE_PROBE_CFLAGS}),
  libs   => join(' ', grep { defined && length } $ENV{ALIEN_LIBDEFLATE_PROBE_LDFLAGS}, '-ldeflate'),
  program => <<'END_OF_CODE');
#include <libdeflate.h>
int main(int argc, char *argv[]) { return 0; }
END_OF_CODE

share {
  ## *bsd make is incompatible
  requires 'Alien::gmake' => 0;
  requires 'Config';

  start_url "https://github.com/ebiggers/libdeflate/releases";
  plugin Download => (
    filter => qr/^v.*\.tar\.gz$/,
    version => qr/([0-9\.]+)/,
  );

  plugin Extract => ( format => 'tar.gz' );

  meta_prop->{destdir} = 1;

  # Available targets:
  # ------------------
  # -e libdeflate.a
  # -e libdeflate.so
  # -e gzip
  # -e gunzip
  # -e benchmark
  # -e test_checksums
  # -e checksum

  my $CC = qq(CC=@{[ $Config::Config{cc} ]});
  my $static_lib = 'libdeflate.a';
  my $shared_lib = qq(libdeflate.@{[ $Config::Config{so} ]});
  my @progs = map { "$_@{[ $Config::Config{_exe} ]}" } qw(gzip gunzip);
  build [
    [ '%{gmake}',
        $CC,
        $static_lib, qw(STATIC_LIB_SUFFIX=.a),
        @progs,
        qw(CFLAGS=-fPIC),
    ],
    [ '%{gmake}',
        $CC,
        $shared_lib,
    ],
    sub {
      my $build = shift;
      my @dirs;
      my %fileset = (
        (map { $_ => path('include')->child($_)->stringify } qw{libdeflate.h}),
        (map { $_ => path('lib')->child($_)->stringify } ( $static_lib, $shared_lib )),
        (map { $_ => path('bin')->child($_)->stringify } @progs),
      );

      $build->log("copy stuff to $ENV{DESTDIR}");
      my $destdir     = $ENV{DESTDIR};
      my $destdir_abs = path($destdir)->child($build->install_prop->{prefix});

      push @dirs, $destdir_abs->child($_)->stringify
        for (qw{include lib bin});

      Alien::Build::CommandSequence->new(
        (map { join ' ', '%{install} -d', $_ } @dirs),
        (map {
          join ' ', '%{install} -c', $_, $destdir_abs->child($fileset{$_})->stringify
        } keys %fileset),
      )->execute($build);
    }
  ];

  plugin 'Gather::IsolateDynamic';

  after gather => sub {
    my $build   = shift;
    my $prefix  = path($build->install_prop->{prefix})->absolute;
    my $lib     = $prefix->child('lib')->stringify;
    my $include = $prefix->child('include');
    my $dynamic = $prefix->child('lib', 'dynamic');
    
    $build->runtime_prop->{cflags}      = "-I$include";
    $build->runtime_prop->{libs}        = "-L$dynamic -ldeflate";
    $build->runtime_prop->{libs_static} = "-L$lib -ldeflate";
  };

};
